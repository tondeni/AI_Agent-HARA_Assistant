"""
Setup script to create necessary folders for HARA Assistant plugin
"""

import os
from cat.log import log

def setup_plugin_folders():
    """Create necessary folders if they don't exist."""
    
    plugin_folder = os.path.dirname(__file__)
    
    # Folders to create
    folders = [
        "item_definitions",  # For storing Item Definition files
        "templates",         # For HAZOP guide words and other templates
        "generated_hara"     # For storing generated HARA documents
    ]
    
    for folder_name in folders:
        folder_path = os.path.join(plugin_folder, folder_name)
        
        if not os.path.exists(folder_path):
            try:
                os.makedirs(folder_path)
                log.info(f"✅ Created folder: {folder_name}")
                
                # Create a README in item_definitions
                if folder_name == "item_definitions":
                    readme_path = os.path.join(folder_path, "README.txt")
                    with open(readme_path, 'w', encoding='utf-8') as f:
                        f.write("""# Item Definitions Folder

Place your Item Definition files here for HARA analysis.

Supported formats:
- .txt
- .md
- .docx (if docx support is installed)

File naming:
- Use descriptive names that match the item name
- Example: "Battery_Management_System.txt"
- Example: "Windscreen_Wiper_System.md"

The HARA Assistant will automatically search this folder when you request:
"extract functions from [item name]"

Alternatively, Item Definitions generated by the ItemDefinition_Developer plugin
will be automatically detected if they are in the working memory or in the
ItemDefinition_Developer plugin folders.
""")
                    log.info("   Created README.txt in item_definitions/")
                    
            except Exception as e:
                log.error(f"❌ Error creating folder {folder_name}: {e}")
        else:
            log.info(f"   Folder already exists: {folder_name}")

# Run setup when plugin loads
try:
    setup_plugin_folders()
except Exception as e:
    log.error(f"❌ Error in plugin setup: {e}")